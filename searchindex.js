Search.setIndex({"docnames": ["index", "interpreter", "interpreter.ast", "interpreter.cse_machine", "interpreter.lexer", "interpreter.parser", "logger", "modules", "myrpal", "structs", "tests"], "filenames": ["index.rst", "interpreter.rst", "interpreter.ast.rst", "interpreter.cse_machine.rst", "interpreter.lexer.rst", "interpreter.parser.rst", "logger.rst", "modules.rst", "myrpal.rst", "structs.rst", "tests.rst"], "titles": ["Welcome to RPAL Interpreter\u2019s documentation!", "interpreter package", "interpreter.ast package", "interpreter.cse_machine package", "interpreter.lexer package", "interpreter.parser package", "logger module", "src", "myrpal module", "structs package", "tests package"], "terms": {"index": [0, 3], "modul": [0, 7], "search": 0, "page": 0, "ast": [1, 5, 7, 10], "submodul": [1, 7], "node": [1, 3, 7, 9], "AND": [1, 2], "and_op": [1, 2], "assign": [1, 2, 3], "AT": [1, 2], "aug": [1, 2], "bop": [1, 2], "comma": [1, 2, 3, 4], "cond": [1, 2], "divid": [1, 2], "dummi": [1, 2, 3], "eq": [1, 2], "fals": [1, 2, 3], "fcn_form": [1, 2], "gamma": [1, 2, 3], "ge": [1, 2], "gr": [1, 2], "lambda": [1, 2, 3], "le": [1, 2], "let": [1, 2], "l": [1, 2], "minu": [1, 2], "multipli": [1, 2], "ne": [1, 2], "neg": [1, 2], "nil": [1, 2], "NOT": [1, 2], "OR": [1, 2], "paren": [1, 2], "plu": [1, 2], "power": [1, 2], "rec": [1, 2, 5], "tau": [1, 2, 3], "true": [1, 2, 3, 9], "type": [1, 2, 3, 4], "uop": [1, 2], "where": [1, 2, 4], "within": [1, 2], "ystar": [1, 2, 3], "standard": [1, 3, 7], "aststandard": [1, 2], "non_standard": [1, 2], "check_to_standard": [1, 2], "astnod": [1, 2, 3], "cse_machin": [1, 7], "control": [1, 7], "addgamma": [1, 3], "addsymbol": [1, 3], "insertcontrolstruct": [1, 3], "insertenvmark": [1, 3], "removerightmost": [1, 3], "control_structur": [1, 7], "csiniti": [1, 3], "init": [1, 3], "controlstruct": [1, 3], "getindex": [1, 3], "controlstructur": [1, 3], "get": [1, 3], "environ": [1, 7], "insertenvdata": [1, 3], "lookupenv": [1, 3], "except": [1, 4, 7], "machineexcept": [1, 3], "function": [1, 7, 10], "concfn": [1, 3], "run": [1, 3, 10], "definedfunct": [1, 3], "getnam": [1, 3], "conc": [1, 3], "isdummi": [1, 3], "isfunct": [1, 3], "isinteg": [1, 3], "isstr": [1, 3], "istruthvalu": [1, 3], "istupl": [1, 3], "ito": [1, 3], "order": [1, 3], "print": [1, 3], "stem": [1, 3], "stern": [1, 3], "get_funct": [1, 3], "isdefin": [1, 3], "functionfactori": [1, 3], "creat": [1, 3, 9], "isdummyfn": [1, 3], "isfunctionfn": [1, 3], "isintegerfn": [1, 3], "isstringfn": [1, 3], "istruthvaluefn": [1, 3], "istuplefn": [1, 3], "itosfn": [1, 3], "orderfn": [1, 3], "printfn": [1, 3], "stemfn": [1, 3], "sternfn": [1, 3], "st": [1, 7, 10], "stnode": [1, 2, 3], "assign_nod": [1, 3], "comma_nod": [1, 3], "createfcrsnod": [1, 3], "gamma_nod": [1, 3], "getchildrencount": [1, 3], "getsibilingcount": [1, 3], "is_condit": [1, 3], "is_gamma": [1, 3], "is_lambda": [1, 3], "is_tau": [1, 3], "lambda_nod": [1, 3], "parsevalueintoken": [1, 3], "sibl": [1, 2, 3], "tau_nod": [1, 3], "ystar_nod": [1, 3], "stack": [1, 7], "popstack": [1, 3], "pushstack": [1, 3], "removeenviron": [1, 3], "top": [1, 3], "symbol": [1, 7], "betasymbol": [1, 3], "binaryoperatorsymbol": [1, 3], "deltasymbol": [1, 3], "envmarkersymbol": [1, 3], "etaclosuresymbol": [1, 3], "fromlambdaclosur": [1, 3], "tolambdaclosur": [1, 3], "functionsymbol": [1, 3], "gammasymbol": [1, 3], "lambdaclosuresymbol": [1, 3], "getenvmarkerindex": [1, 3], "lambdasymbol": [1, 3], "namesymbol": [1, 3], "isid": [1, 3], "isprimit": [1, 3], "istuplesymbol": [1, 3], "isvalidtyp": [1, 3], "operatorsymbol": [1, 3], "istyp": [1, 3, 4], "symbolfactori": [1, 3], "createsymbol": [1, 3], "tausymbol": [1, 3], "tuplesymbol": [1, 3], "unaryoperatorsymbol": [1, 3], "ystarsymbol": [1, 3], "csemachin": [1, 3], "applyfp": [1, 3], "applyfunct": [1, 3], "applylambda": [1, 3], "applyystar": [1, 3], "binop": [1, 3], "condit": [1, 3], "currentenv": [1, 3], "evalu": [1, 3], "exitenv": [1, 3], "get_arg": [1, 3], "stacklambda": [1, 3], "stacknam": [1, 3], "tupleform": [1, 3], "tupleselect": [1, 3], "unop": [1, 3], "lexer": [1, 7], "token": [1, 7], "buildtreeexcept": [1, 4], "builttreeexcept": [1, 4], "commatoken": [1, 4], "regex": [1, 4], "commenttoken": [1, 4], "identifiertoken": [1, 4], "integertoken": [1, 4], "invalidtokenexcept": [1, 4], "fromlin": [1, 4], "fromtoken": [1, 4], "keywordtoken": [1, 4], "type_keyword": [1, 4], "valu": [1, 2, 3, 4, 9], "lparentoken": [1, 4], "operatortoken": [1, 4], "rparentoken": [1, 4], "semicolontoken": [1, 4], "spacestoken": [1, 4], "stringtoken": [1, 4], "fromvalu": [1, 4], "gettyp": [1, 4], "getvalu": [1, 4, 7, 9], "instanc": [1, 3, 4, 9], "isvalu": [1, 4, 7, 9], "tokenregex": [1, 4], "closeparen": [1, 4], "comment": [1, 4], "identifi": [1, 3, 4, 9], "integ": [1, 3, 4], "operator_symbol": [1, 4], "openparen": [1, 4], "oper": [1, 3, 4], "semicolon": [1, 4], "space": [1, 4], "string": [1, 3, 4], "lookahead": [1, 4], "nexttoken": [1, 4], "reset": [1, 4], "parser": [1, 4, 7, 8, 10], "rpalpars": [1, 5], "pars": [1, 4, 5], "proc_a": [1, 5], "proc_af": [1, 5], "proc_ap": [1, 5], "proc_at": [1, 5], "proc_b": [1, 5], "proc_bp": [1, 5], "proc_bt": [1, 5], "proc_d": [1, 5], "proc_da": [1, 5], "proc_db": [1, 5], "proc_dr": [1, 5], "proc_": [1, 5], "proc_ew": [1, 5], "proc_r": [1, 5], "proc_rn": [1, 5], "proc_t": [1, 5], "proc_ta": [1, 5], "proc_tc": [1, 5], "proc_vb": [1, 5], "proc_vl": [1, 5], "class": [1, 2, 3, 4, 5, 9, 10], "program": [1, 4, 5], "switch": 1, "none": [1, 2, 3, 4, 8, 9], "base": [1, 2, 3, 4, 5, 9, 10], "object": [1, 2, 3, 4, 9], "repres": [1, 2, 3, 4, 9], "attribut": [1, 3, 4, 9], "__program": 1, "The": [1, 2, 3, 4, 5, 9], "sourc": [1, 5], "code": [1, 3], "__switch": 1, "specifi": [1, 4, 9], "__ast": 1, "abstract": [1, 2, 5], "syntax": [1, 2, 5], "tree": [1, 2, 3, 4, 5, 7], "__st": 1, "given": [1, 2, 3, 9], "A": [2, 3, 5, 9], "reserv": 2, "function_form": 2, "y": [2, 3], "an": [2, 3, 4, 9], "static": [2, 3, 9], "binarytreenod": [2, 3, 7, 9], "arg": [2, 3, 4], "input": 2, "return": [2, 3, 4, 5, 8, 9], "root": 2, "left": [2, 3, 4, 9], "right": [2, 3, 4, 9], "us": [2, 3], "child": [2, 3, 9], "represent": [2, 3], "store": [2, 3], "structur": [2, 3, 9], "each": [2, 3], "contain": [2, 3], "refer": [2, 3], "its": [2, 3, 4], "cse": 3, "machin": 3, "method": [3, 4, 9], "remov": 3, "rightmost": 3, "element": 3, "list": [3, 4], "insert": 3, "env_index": 3, "int": [3, 4, 9], "marker": 3, "gener": [3, 4, 9, 10], "from": [3, 4, 8], "iter": 3, "implement": [3, 5, 9], "append": 3, "control_structure_map": 3, "dict": 3, "which": 3, "dictionari": 3, "delta_index": 3, "delta": 3, "envindex": 3, "parent": 3, "envmark": 3, "envdata": 3, "data": 3, "name": [3, 8, 9], "str": [3, 4], "variabl": 3, "look": [3, 4], "up": [3, 4], "relev": 3, "messag": [3, 4], "concaten": 3, "primit": 3, "tupl": 3, "_definedfunction__nam": 3, "defin": 3, "ar": [3, 4, 5], "here": [3, 5], "factori": 3, "predefin": 3, "check": [3, 4, 9], "argument": [3, 8], "i": [3, 4, 9], "boolean": 3, "convert": 3, "length": 3, "first": 3, "charact": [3, 4], "without": [3, 4], "new": [3, 9], "form": 3, "fcr": 3, "sibling_list": 3, "set": 3, "next": [3, 4], "pop": [3, 7, 9], "push": [3, 7, 9], "beta": 3, "when": [3, 4], "conditon": 3, "binari": [3, 9], "point": [3, 8], "arrai": 3, "__eq__": 3, "other": 3, "bool": [3, 4, 9], "whether": [3, 4], "equal": 3, "eta": 3, "closur": 3, "extend": 3, "lambdaclosur": 3, "etaclosur": 3, "func": 3, "is_id": [3, 7, 9], "numer": 3, "nametyp": 3, "valid": 3, "t": [3, 4, 9], "n": [3, 4], "tuplelist": 3, "unari": 3, "respons": [3, 4], "simul": 3, "rpal": [3, 5, 8, 10], "languag": 3, "It": 3, "manag": 3, "intepret": 3, "thi": [3, 4], "provid": [3, 9], "express": 3, "rule": 3, "csmap": 3, "map": 3, "ie": 3, "0": [3, 4], "1": [3, 4], "etc": 3, "envindexcount": 3, "counter": 3, "eg": 3, "e0": 3, "e1": 3, "envmap": 3, "__envstack": 3, "logger": [3, 7], "13": 3, "handl": 3, "14": 3, "appli": 3, "4": 3, "11": 3, "ari": 3, "well": 3, "make": 3, "current": [3, 4], "also": 3, "env_vari": 3, "respect": 3, "env_valu": 3, "12": 3, "6": 3, "comput": 3, "result": 3, "8": 3, "delta_then": 3, "delta_els": 3, "b": 3, "env_mark": 3, "5": 3, "exit": 3, "rand_symbol": 3, "_lambda": 3, "2": 3, "_tau": 3, "9": [3, 4], "tuple_": 3, "10": 3, "7": 3, "error": 4, "build": 4, "throw": 4, "ha": 4, "finish": 4, "line": [4, 8], "col": 4, "invalid": 4, "encount": 4, "classmethod": [4, 9], "keyword": 4, "parenthesi": 4, "number": 4, "appear": 4, "column": 4, "certain": 4, "re": 4, "compil": 4, "za": 4, "z0": 4, "_": 4, "z": 4, "9_": 4, "": 4, "sa": 4, "posit": 4, "line_no": 4, "char_po": 4, "initi": 4, "state": 4, "count": 4, "retriev": 4, "__nexttoken": 4, "intern": 4, "rais": 4, "If": 4, "consum": 4, "more": 4, "onli": 4, "ahead": 4, "queue": 4, "option": 4, "default": 4, "src": 5, "procedur": 5, "grammar": 5, "dr": 5, "db": 5, "interpret": 7, "packag": 7, "subpackag": 7, "content": 7, "myrpal": 7, "main": [7, 8], "struct": 7, "is_empti": [7, 9], "peek": [7, 9], "size": [7, 9], "copi": [7, 9], "deep_copi": [7, 9], "getleft": [7, 9], "getright": [7, 9], "is_nam": [7, 9], "setleft": [7, 9], "setright": [7, 9], "setvalu": [7, 9], "treeformatt": [7, 9], "line_str": [7, 9], "test": 7, "test_cse_machin": 7, "testmachineoutput": [7, 10], "run_rpal": [7, 10], "test_lex": 7, "testlex": [7, 10], "test_integer_token": [7, 10], "test_lex_comma": [7, 10], "test_lex_com": [7, 10], "test_lex_comment_2": [7, 10], "test_lex_empti": [7, 10], "test_lex_invalid_token": [7, 10], "test_lex_one_token": [7, 10], "test_lex_paren": [7, 10], "test_lex_semicolon": [7, 10], "test_lex_simpl": [7, 10], "test_lex_spac": [7, 10], "test_lex_two_token": [7, 10], "test_lookahead_after_nexttoken": [7, 10], "test_lookahead_com": [7, 10], "test_lookahead_comment_2": [7, 10], "test_lookahead_default": [7, 10], "test_lookahead_empti": [7, 10], "test_lookahead_multiple_cal": [7, 10], "test_lookahead_simpl": [7, 10], "test_nexttoken": [7, 10], "test_operator_token": [7, 10], "test_string_token": [7, 10], "test_str": [7, 10], "test_pars": 7, "testpars": [7, 10], "test_ast_str": [7, 10], "test_rpal_pars": 7, "testrpalpars": [7, 10], "test_d": [7, 10], "test_": [7, 10], "test_e_1": [7, 10], "test_e_empti": [7, 10], "test_rn": [7, 10], "test_rn_empti": [7, 10], "test_tc": [7, 10], "test_vb": [7, 10], "test_vl": [7, 10], "test_st": 7, "testrpalstgener": [7, 10], "get_rpal_st": [7, 10], "test_st_gener": [7, 10], "entri": 8, "lexic": 8, "analyz": 8, "read": 8, "file": [8, 10], "command": 8, "item": 9, "__valu": 9, "__left": 9, "__right": 9, "deep": 9, "compar": 9, "format": 9, "level": 9, "methodnam": 10, "runtest": 10, "testcas": 10, "filenam": 10, "helper": 10, "flag": 10, "against": 10, "expect": 10, "output": 10}, "objects": {"": [[1, 0, 0, "-", "interpreter"], [6, 0, 0, "-", "logger"], [8, 0, 0, "-", "myrpal"], [9, 0, 0, "-", "structs"], [10, 0, 0, "-", "tests"]], "interpreter": [[1, 1, 1, "", "Interpreter"], [2, 0, 0, "-", "ast"], [3, 0, 0, "-", "cse_machine"], [4, 0, 0, "-", "lexer"], [5, 0, 0, "-", "parser"]], "interpreter.Interpreter": [[1, 2, 1, "", "interpret"]], "interpreter.ast": [[2, 1, 1, "", "ASTNode"], [2, 0, 0, "-", "nodes"], [2, 0, 0, "-", "standardize"]], "interpreter.ast.nodes": [[2, 1, 1, "", "Nodes"]], "interpreter.ast.nodes.Nodes": [[2, 3, 1, "", "AND"], [2, 3, 1, "", "AND_OP"], [2, 3, 1, "", "ASSIGN"], [2, 3, 1, "", "AT"], [2, 3, 1, "", "AUG"], [2, 3, 1, "", "BOP"], [2, 3, 1, "", "COMMA"], [2, 3, 1, "", "COND"], [2, 3, 1, "", "DIVIDE"], [2, 3, 1, "", "DUMMY"], [2, 3, 1, "", "EQ"], [2, 3, 1, "", "FALSE"], [2, 3, 1, "", "FCN_FORM"], [2, 3, 1, "", "GAMMA"], [2, 3, 1, "", "GE"], [2, 3, 1, "", "GR"], [2, 3, 1, "", "LAMBDA"], [2, 3, 1, "", "LE"], [2, 3, 1, "", "LET"], [2, 3, 1, "", "LS"], [2, 3, 1, "", "MINUS"], [2, 3, 1, "", "MULTIPLY"], [2, 3, 1, "", "NE"], [2, 3, 1, "", "NEG"], [2, 3, 1, "", "NIL"], [2, 3, 1, "", "NOT"], [2, 3, 1, "", "OR"], [2, 3, 1, "", "PARENS"], [2, 3, 1, "", "PLUS"], [2, 3, 1, "", "POWER"], [2, 3, 1, "", "REC"], [2, 3, 1, "", "TAU"], [2, 3, 1, "", "TRUE"], [2, 3, 1, "", "TYPES"], [2, 3, 1, "", "UOP"], [2, 3, 1, "", "WHERE"], [2, 3, 1, "", "WITHIN"], [2, 3, 1, "", "YSTAR"]], "interpreter.ast.standardize": [[2, 1, 1, "", "ASTStandardizer"]], "interpreter.ast.standardize.ASTStandardizer": [[2, 3, 1, "", "NON_STANDARDIZE"], [2, 2, 1, "", "check_to_standardize"], [2, 2, 1, "", "standardize"]], "interpreter.cse_machine": [[3, 1, 1, "", "CSEMachine"], [3, 0, 0, "-", "control"], [3, 0, 0, "-", "control_structures"], [3, 0, 0, "-", "environment"], [3, 0, 0, "-", "exceptions"], [3, 0, 0, "-", "functions"], [3, 0, 0, "-", "st"], [3, 0, 0, "-", "stack"], [3, 0, 0, "-", "symbol"]], "interpreter.cse_machine.CSEMachine": [[3, 2, 1, "", "applyFP"], [3, 2, 1, "", "applyFunction"], [3, 2, 1, "", "applyLambda"], [3, 2, 1, "", "applyYStar"], [3, 2, 1, "", "binop"], [3, 2, 1, "", "conditional"], [3, 2, 1, "", "currentEnv"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "exitEnv"], [3, 2, 1, "", "get_arg"], [3, 2, 1, "", "stackLambda"], [3, 2, 1, "", "stackName"], [3, 2, 1, "", "tupleFormation"], [3, 2, 1, "", "tupleSelection"], [3, 2, 1, "", "unop"]], "interpreter.cse_machine.control": [[3, 1, 1, "", "Control"]], "interpreter.cse_machine.control.Control": [[3, 2, 1, "", "addGamma"], [3, 2, 1, "", "addSymbol"], [3, 2, 1, "", "insertControlStruct"], [3, 2, 1, "", "insertEnvMarker"], [3, 2, 1, "", "removeRightMost"]], "interpreter.cse_machine.control_structures": [[3, 1, 1, "", "CSInitializer"], [3, 1, 1, "", "ControlStruct"], [3, 1, 1, "", "ControlStructures"]], "interpreter.cse_machine.control_structures.CSInitializer": [[3, 2, 1, "", "init"]], "interpreter.cse_machine.control_structures.ControlStruct": [[3, 2, 1, "", "addSymbol"], [3, 2, 1, "", "getIndex"]], "interpreter.cse_machine.control_structures.ControlStructures": [[3, 2, 1, "", "get"]], "interpreter.cse_machine.environment": [[3, 1, 1, "", "Environment"]], "interpreter.cse_machine.environment.Environment": [[3, 2, 1, "", "getIndex"], [3, 2, 1, "", "insertEnvData"], [3, 2, 1, "", "lookUpEnv"]], "interpreter.cse_machine.exceptions": [[3, 4, 1, "", "MachineException"]], "interpreter.cse_machine.functions": [[3, 1, 1, "", "ConcFn"], [3, 1, 1, "", "DefinedFunction"], [3, 1, 1, "", "DefinedFunctions"], [3, 1, 1, "", "FunctionFactory"], [3, 1, 1, "", "IsDummyFn"], [3, 1, 1, "", "IsFunctionFn"], [3, 1, 1, "", "IsIntegerFn"], [3, 1, 1, "", "IsStringFn"], [3, 1, 1, "", "IsTruthValueFn"], [3, 1, 1, "", "IsTupleFn"], [3, 1, 1, "", "ItoSFn"], [3, 1, 1, "", "OrderFn"], [3, 1, 1, "", "PrintFn"], [3, 1, 1, "", "StemFn"], [3, 1, 1, "", "SternFn"]], "interpreter.cse_machine.functions.ConcFn": [[3, 2, 1, "", "run"]], "interpreter.cse_machine.functions.DefinedFunction": [[3, 2, 1, "", "getName"], [3, 2, 1, "", "run"]], "interpreter.cse_machine.functions.DefinedFunctions": [[3, 3, 1, "", "CONC"], [3, 3, 1, "", "ISDUMMY"], [3, 3, 1, "", "ISFUNCTION"], [3, 3, 1, "", "ISINTEGER"], [3, 3, 1, "", "ISSTRING"], [3, 3, 1, "", "ISTRUTHVALUE"], [3, 3, 1, "", "ISTUPLE"], [3, 3, 1, "", "ITOS"], [3, 3, 1, "", "ORDER"], [3, 3, 1, "", "PRINT"], [3, 3, 1, "", "STEM"], [3, 3, 1, "", "STERN"], [3, 2, 1, "", "get_functions"], [3, 2, 1, "", "isdefined"]], "interpreter.cse_machine.functions.FunctionFactory": [[3, 2, 1, "", "create"]], "interpreter.cse_machine.functions.IsDummyFn": [[3, 2, 1, "", "run"]], "interpreter.cse_machine.functions.IsFunctionFn": [[3, 2, 1, "", "run"]], "interpreter.cse_machine.functions.IsIntegerFn": [[3, 2, 1, "", "run"]], "interpreter.cse_machine.functions.IsStringFn": [[3, 2, 1, "", "run"]], "interpreter.cse_machine.functions.IsTruthValueFn": [[3, 2, 1, "", "run"]], "interpreter.cse_machine.functions.IsTupleFn": [[3, 2, 1, "", "run"]], "interpreter.cse_machine.functions.ItoSFn": [[3, 2, 1, "", "run"]], "interpreter.cse_machine.functions.OrderFn": [[3, 2, 1, "", "run"]], "interpreter.cse_machine.functions.PrintFn": [[3, 2, 1, "", "run"]], "interpreter.cse_machine.functions.StemFn": [[3, 2, 1, "", "run"]], "interpreter.cse_machine.functions.SternFn": [[3, 2, 1, "", "run"]], "interpreter.cse_machine.st": [[3, 1, 1, "", "STNode"]], "interpreter.cse_machine.st.STNode": [[3, 2, 1, "", "assign_node"], [3, 2, 1, "", "comma_node"], [3, 2, 1, "", "createFCRSNode"], [3, 2, 1, "", "gamma_node"], [3, 2, 1, "", "getChildrenCount"], [3, 2, 1, "", "getSibilingCount"], [3, 2, 1, "", "is_conditional"], [3, 2, 1, "", "is_gamma"], [3, 2, 1, "", "is_lambda"], [3, 2, 1, "", "is_tau"], [3, 2, 1, "", "lambda_node"], [3, 2, 1, "", "parseValueInToken"], [3, 2, 1, "", "siblings"], [3, 2, 1, "", "tau_node"], [3, 2, 1, "", "ystar_node"]], "interpreter.cse_machine.stack": [[3, 1, 1, "", "Stack"]], "interpreter.cse_machine.stack.Stack": [[3, 2, 1, "", "popStack"], [3, 2, 1, "", "pushStack"], [3, 2, 1, "", "removeEnvironment"], [3, 2, 1, "", "top"]], "interpreter.cse_machine.symbol": [[3, 1, 1, "", "BetaSymbol"], [3, 1, 1, "", "BinaryOperatorSymbol"], [3, 1, 1, "", "DeltaSymbol"], [3, 1, 1, "", "EnvMarkerSymbol"], [3, 1, 1, "", "EtaClosureSymbol"], [3, 1, 1, "", "FunctionSymbol"], [3, 1, 1, "", "GammaSymbol"], [3, 1, 1, "", "LambdaClosureSymbol"], [3, 1, 1, "", "LambdaSymbol"], [3, 1, 1, "", "NameSymbol"], [3, 1, 1, "", "OperatorSymbol"], [3, 1, 1, "", "Symbol"], [3, 1, 1, "", "SymbolFactory"], [3, 1, 1, "", "TauSymbol"], [3, 1, 1, "", "TupleSymbol"], [3, 1, 1, "", "UnaryOperatorSymbol"], [3, 1, 1, "", "YStarSymbol"]], "interpreter.cse_machine.symbol.EtaClosureSymbol": [[3, 2, 1, "", "fromLambdaClosure"], [3, 2, 1, "", "toLambdaClosure"]], "interpreter.cse_machine.symbol.LambdaClosureSymbol": [[3, 2, 1, "", "getEnvMarkerIndex"]], "interpreter.cse_machine.symbol.NameSymbol": [[3, 2, 1, "", "isFunction"], [3, 2, 1, "", "isId"], [3, 2, 1, "", "isPrimitive"], [3, 2, 1, "", "isString"], [3, 2, 1, "", "isTupleSymbol"], [3, 2, 1, "", "isValidType"]], "interpreter.cse_machine.symbol.Symbol": [[3, 2, 1, "", "isType"]], "interpreter.cse_machine.symbol.SymbolFactory": [[3, 2, 1, "", "createSymbol"]], "interpreter.lexer": [[4, 1, 1, "", "Lexer"], [4, 0, 0, "-", "tokens"]], "interpreter.lexer.Lexer": [[4, 2, 1, "", "lookAhead"], [4, 2, 1, "", "nextToken"], [4, 2, 1, "", "reset"], [4, 2, 1, "", "tokenize"]], "interpreter.lexer.tokens": [[4, 4, 1, "", "BuildTreeException"], [4, 4, 1, "", "BuiltTreeException"], [4, 1, 1, "", "CommaToken"], [4, 1, 1, "", "CommentToken"], [4, 1, 1, "", "IdentifierToken"], [4, 1, 1, "", "IntegerToken"], [4, 4, 1, "", "InvalidTokenException"], [4, 1, 1, "", "KeywordToken"], [4, 1, 1, "", "LParenToken"], [4, 1, 1, "", "OperatorToken"], [4, 1, 1, "", "RParenToken"], [4, 1, 1, "", "SemiColonToken"], [4, 1, 1, "", "SpacesToken"], [4, 1, 1, "", "StringToken"], [4, 1, 1, "", "Token"], [4, 1, 1, "", "TokenRegex"]], "interpreter.lexer.tokens.CommaToken": [[4, 2, 1, "", "regex"]], "interpreter.lexer.tokens.CommentToken": [[4, 2, 1, "", "regex"]], "interpreter.lexer.tokens.IdentifierToken": [[4, 2, 1, "", "regex"]], "interpreter.lexer.tokens.IntegerToken": [[4, 2, 1, "", "regex"]], "interpreter.lexer.tokens.InvalidTokenException": [[4, 2, 1, "", "fromLine"], [4, 2, 1, "", "fromToken"]], "interpreter.lexer.tokens.KeywordToken": [[4, 2, 1, "", "type_keywords"], [4, 2, 1, "", "values"]], "interpreter.lexer.tokens.LParenToken": [[4, 2, 1, "", "regex"]], "interpreter.lexer.tokens.OperatorToken": [[4, 2, 1, "", "regex"]], "interpreter.lexer.tokens.RParenToken": [[4, 2, 1, "", "regex"]], "interpreter.lexer.tokens.SemiColonToken": [[4, 2, 1, "", "regex"]], "interpreter.lexer.tokens.SpacesToken": [[4, 2, 1, "", "regex"]], "interpreter.lexer.tokens.StringToken": [[4, 2, 1, "", "regex"]], "interpreter.lexer.tokens.Token": [[4, 2, 1, "", "fromValue"], [4, 2, 1, "", "getType"], [4, 2, 1, "", "getValue"], [4, 2, 1, "", "instance"], [4, 2, 1, "", "isType"], [4, 2, 1, "", "isValue"], [4, 2, 1, "", "regex"]], "interpreter.lexer.tokens.TokenRegex": [[4, 3, 1, "", "CloseParen"], [4, 3, 1, "", "Comma"], [4, 3, 1, "", "Comment"], [4, 3, 1, "", "Identifier"], [4, 3, 1, "", "Integer"], [4, 3, 1, "", "OPERATOR_SYMBOL"], [4, 3, 1, "", "OpenParen"], [4, 3, 1, "", "Operator"], [4, 3, 1, "", "SemiColon"], [4, 3, 1, "", "Spaces"], [4, 3, 1, "", "String"]], "interpreter.parser": [[5, 1, 1, "", "RPALParser"]], "interpreter.parser.RPALParser": [[5, 2, 1, "", "parse"], [5, 2, 1, "", "proc_A"], [5, 2, 1, "", "proc_Af"], [5, 2, 1, "", "proc_Ap"], [5, 2, 1, "", "proc_At"], [5, 2, 1, "", "proc_B"], [5, 2, 1, "", "proc_Bp"], [5, 2, 1, "", "proc_Bs"], [5, 2, 1, "", "proc_Bt"], [5, 2, 1, "", "proc_D"], [5, 2, 1, "", "proc_Da"], [5, 2, 1, "", "proc_Db"], [5, 2, 1, "", "proc_Dr"], [5, 2, 1, "", "proc_E"], [5, 2, 1, "", "proc_Ew"], [5, 2, 1, "", "proc_R"], [5, 2, 1, "", "proc_Rn"], [5, 2, 1, "", "proc_T"], [5, 2, 1, "", "proc_Ta"], [5, 2, 1, "", "proc_Tc"], [5, 2, 1, "", "proc_Vb"], [5, 2, 1, "", "proc_Vl"]], "myrpal": [[8, 5, 1, "", "main"]], "structs": [[9, 0, 0, "-", "stack"], [9, 0, 0, "-", "tree"]], "structs.stack": [[9, 1, 1, "", "Stack"]], "structs.stack.Stack": [[9, 2, 1, "", "is_empty"], [9, 2, 1, "", "peek"], [9, 2, 1, "", "pop"], [9, 2, 1, "", "push"], [9, 2, 1, "", "size"]], "structs.tree": [[9, 1, 1, "", "BinaryTreeNode"], [9, 1, 1, "", "TreeFormatter"]], "structs.tree.BinaryTreeNode": [[9, 2, 1, "", "copy"], [9, 2, 1, "", "deep_copy"], [9, 2, 1, "", "getLeft"], [9, 2, 1, "", "getRight"], [9, 2, 1, "", "getValue"], [9, 2, 1, "", "isValue"], [9, 2, 1, "", "is_id"], [9, 2, 1, "", "is_name"], [9, 2, 1, "", "setLeft"], [9, 2, 1, "", "setRight"], [9, 2, 1, "", "setValue"]], "structs.tree.TreeFormatter": [[9, 2, 1, "", "line_str"]], "tests": [[10, 0, 0, "-", "test_cse_machine"], [10, 0, 0, "-", "test_lexer"], [10, 0, 0, "-", "test_parser"], [10, 0, 0, "-", "test_rpal_parser"], [10, 0, 0, "-", "test_st"]], "tests.test_cse_machine": [[10, 1, 1, "", "TestMachineOutput"]], "tests.test_cse_machine.TestMachineOutput": [[10, 2, 1, "", "run_rpal"], [10, 2, 1, "", "test_cse_machine"]], "tests.test_lexer": [[10, 1, 1, "", "TestLexer"]], "tests.test_lexer.TestLexer": [[10, 2, 1, "", "test_integer_token"], [10, 2, 1, "", "test_lex"], [10, 2, 1, "", "test_lex_comma"], [10, 2, 1, "", "test_lex_comment"], [10, 2, 1, "", "test_lex_comment_2"], [10, 2, 1, "", "test_lex_empty"], [10, 2, 1, "", "test_lex_invalid_token"], [10, 2, 1, "", "test_lex_one_token"], [10, 2, 1, "", "test_lex_paren"], [10, 2, 1, "", "test_lex_semicolon"], [10, 2, 1, "", "test_lex_simple"], [10, 2, 1, "", "test_lex_spaces"], [10, 2, 1, "", "test_lex_two_tokens"], [10, 2, 1, "", "test_lookAhead_after_nextToken"], [10, 2, 1, "", "test_lookAhead_comment"], [10, 2, 1, "", "test_lookAhead_comment_2"], [10, 2, 1, "", "test_lookAhead_default"], [10, 2, 1, "", "test_lookAhead_empty"], [10, 2, 1, "", "test_lookAhead_multiple_calls"], [10, 2, 1, "", "test_lookAhead_simple"], [10, 2, 1, "", "test_nextToken"], [10, 2, 1, "", "test_operator_token"], [10, 2, 1, "", "test_string_token"], [10, 2, 1, "", "test_strings"]], "tests.test_parser": [[10, 1, 1, "", "TestParser"]], "tests.test_parser.TestParser": [[10, 2, 1, "", "test_ast_str"]], "tests.test_rpal_parser": [[10, 1, 1, "", "TestRPALParser"]], "tests.test_rpal_parser.TestRPALParser": [[10, 2, 1, "", "test"], [10, 2, 1, "", "test_D"], [10, 2, 1, "", "test_E"], [10, 2, 1, "", "test_E_1"], [10, 2, 1, "", "test_E_empty"], [10, 2, 1, "", "test_Rn"], [10, 2, 1, "", "test_Rn_empty"], [10, 2, 1, "", "test_Tc"], [10, 2, 1, "", "test_Vb"], [10, 2, 1, "", "test_Vl"]], "tests.test_st": [[10, 1, 1, "", "TestRPALSTGeneration"]], "tests.test_st.TestRPALSTGeneration": [[10, 2, 1, "", "get_rpal_st"], [10, 2, 1, "", "test_st_generation"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:exception", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "exception", "Python exception"], "5": ["py", "function", "Python function"]}, "titleterms": {"welcom": 0, "rpal": 0, "interpret": [0, 1, 2, 3, 4, 5], "": 0, "document": 0, "indic": 0, "tabl": 0, "packag": [1, 2, 3, 4, 5, 9, 10], "subpackag": 1, "modul": [1, 2, 3, 4, 5, 6, 8, 9, 10], "content": [1, 2, 3, 4, 5, 9, 10], "ast": 2, "submodul": [2, 3, 4, 9, 10], "node": 2, "standard": 2, "cse_machin": 3, "control": 3, "control_structur": 3, "environ": 3, "except": 3, "function": 3, "st": 3, "stack": [3, 9], "symbol": 3, "lexer": 4, "token": 4, "parser": 5, "logger": 6, "src": 7, "myrpal": 8, "struct": 9, "tree": 9, "test": 10, "test_cse_machin": 10, "test_lex": 10, "test_pars": 10, "test_rpal_pars": 10, "test_st": 10}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 58}, "alltitles": {"Welcome to RPAL Interpreter\u2019s documentation!": [[0, "welcome-to-rpal-interpreter-s-documentation"]], "Indices and tables": [[0, "indices-and-tables"]], "interpreter package": [[1, "interpreter-package"]], "Subpackages": [[1, "subpackages"]], "Module contents": [[1, "module-interpreter"], [2, "module-interpreter.ast"], [3, "module-interpreter.cse_machine"], [4, "module-interpreter.lexer"], [5, "module-interpreter.parser"], [9, "module-structs"], [10, "module-tests"]], "interpreter.ast package": [[2, "interpreter-ast-package"]], "Submodules": [[2, "submodules"], [3, "submodules"], [4, "submodules"], [9, "submodules"], [10, "submodules"]], "interpreter.ast.nodes module": [[2, "module-interpreter.ast.nodes"]], "interpreter.ast.standardize module": [[2, "module-interpreter.ast.standardize"]], "interpreter.cse_machine package": [[3, "interpreter-cse-machine-package"]], "interpreter.cse_machine.control module": [[3, "module-interpreter.cse_machine.control"]], "interpreter.cse_machine.control_structures module": [[3, "module-interpreter.cse_machine.control_structures"]], "interpreter.cse_machine.environment module": [[3, "module-interpreter.cse_machine.environment"]], "interpreter.cse_machine.exceptions module": [[3, "module-interpreter.cse_machine.exceptions"]], "interpreter.cse_machine.functions module": [[3, "module-interpreter.cse_machine.functions"]], "interpreter.cse_machine.st module": [[3, "module-interpreter.cse_machine.st"]], "interpreter.cse_machine.stack module": [[3, "module-interpreter.cse_machine.stack"]], "interpreter.cse_machine.symbol module": [[3, "module-interpreter.cse_machine.symbol"]], "interpreter.lexer package": [[4, "interpreter-lexer-package"]], "interpreter.lexer.tokens module": [[4, "module-interpreter.lexer.tokens"]], "interpreter.parser package": [[5, "interpreter-parser-package"]], "logger module": [[6, "module-logger"]], "src": [[7, "src"]], "myrpal module": [[8, "module-myrpal"]], "structs package": [[9, "structs-package"]], "structs.stack module": [[9, "module-structs.stack"]], "structs.tree module": [[9, "module-structs.tree"]], "tests package": [[10, "tests-package"]], "tests.test_cse_machine module": [[10, "module-tests.test_cse_machine"]], "tests.test_lexer module": [[10, "module-tests.test_lexer"]], "tests.test_parser module": [[10, "module-tests.test_parser"]], "tests.test_rpal_parser module": [[10, "module-tests.test_rpal_parser"]], "tests.test_st module": [[10, "module-tests.test_st"]]}, "indexentries": {"interpreter (class in interpreter)": [[1, "interpreter.Interpreter"]], "interpret() (interpreter.interpreter method)": [[1, "interpreter.Interpreter.interpret"]], "interpreter": [[1, "module-interpreter"]], "module": [[1, "module-interpreter"], [2, "module-interpreter.ast"], [2, "module-interpreter.ast.nodes"], [2, "module-interpreter.ast.standardize"], [3, "module-interpreter.cse_machine"], [3, "module-interpreter.cse_machine.control"], [3, "module-interpreter.cse_machine.control_structures"], [3, "module-interpreter.cse_machine.environment"], [3, "module-interpreter.cse_machine.exceptions"], [3, "module-interpreter.cse_machine.functions"], [3, "module-interpreter.cse_machine.st"], [3, "module-interpreter.cse_machine.stack"], [3, "module-interpreter.cse_machine.symbol"], [4, "module-interpreter.lexer"], [4, "module-interpreter.lexer.tokens"], [5, "module-interpreter.parser"], [6, "module-logger"], [8, "module-myrpal"], [9, "module-structs"], [9, "module-structs.stack"], [9, "module-structs.tree"], [10, "module-tests"], [10, "module-tests.test_cse_machine"], [10, "module-tests.test_lexer"], [10, "module-tests.test_parser"], [10, "module-tests.test_rpal_parser"], [10, "module-tests.test_st"]], "and (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.AND"]], "and_op (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.AND_OP"]], "assign (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.ASSIGN"]], "astnode (class in interpreter.ast)": [[2, "interpreter.ast.ASTNode"]], "aststandardizer (class in interpreter.ast.standardize)": [[2, "interpreter.ast.standardize.ASTStandardizer"]], "at (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.AT"]], "aug (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.AUG"]], "bop (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.BOP"]], "comma (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.COMMA"]], "cond (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.COND"]], "divide (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.DIVIDE"]], "dummy (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.DUMMY"]], "eq (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.EQ"]], "false (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.FALSE"]], "fcn_form (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.FCN_FORM"]], "gamma (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.GAMMA"]], "ge (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.GE"]], "gr (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.GR"]], "lambda (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.LAMBDA"]], "le (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.LE"]], "let (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.LET"]], "ls (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.LS"]], "minus (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.MINUS"]], "multiply (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.MULTIPLY"]], "ne (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.NE"]], "neg (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.NEG"]], "nil (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.NIL"]], "non_standardize (interpreter.ast.standardize.aststandardizer attribute)": [[2, "interpreter.ast.standardize.ASTStandardizer.NON_STANDARDIZE"]], "not (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.NOT"]], "nodes (class in interpreter.ast.nodes)": [[2, "interpreter.ast.nodes.Nodes"]], "or (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.OR"]], "parens (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.PARENS"]], "plus (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.PLUS"]], "power (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.POWER"]], "rec (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.REC"]], "tau (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.TAU"]], "true (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.TRUE"]], "types (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.TYPES"]], "uop (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.UOP"]], "where (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.WHERE"]], "within (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.WITHIN"]], "ystar (interpreter.ast.nodes.nodes attribute)": [[2, "interpreter.ast.nodes.Nodes.YSTAR"]], "check_to_standardize() (interpreter.ast.standardize.aststandardizer static method)": [[2, "interpreter.ast.standardize.ASTStandardizer.check_to_standardize"]], "interpreter.ast": [[2, "module-interpreter.ast"]], "interpreter.ast.nodes": [[2, "module-interpreter.ast.nodes"]], "interpreter.ast.standardize": [[2, "module-interpreter.ast.standardize"]], "standardize() (interpreter.ast.standardize.aststandardizer method)": [[2, "interpreter.ast.standardize.ASTStandardizer.standardize"]], "betasymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.BetaSymbol"]], "binaryoperatorsymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.BinaryOperatorSymbol"]], "conc (interpreter.cse_machine.functions.definedfunctions attribute)": [[3, "interpreter.cse_machine.functions.DefinedFunctions.CONC"]], "csemachine (class in interpreter.cse_machine)": [[3, "interpreter.cse_machine.CSEMachine"]], "csinitializer (class in interpreter.cse_machine.control_structures)": [[3, "interpreter.cse_machine.control_structures.CSInitializer"]], "concfn (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.ConcFn"]], "control (class in interpreter.cse_machine.control)": [[3, "interpreter.cse_machine.control.Control"]], "controlstruct (class in interpreter.cse_machine.control_structures)": [[3, "interpreter.cse_machine.control_structures.ControlStruct"]], "controlstructures (class in interpreter.cse_machine.control_structures)": [[3, "interpreter.cse_machine.control_structures.ControlStructures"]], "definedfunction (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.DefinedFunction"]], "definedfunctions (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.DefinedFunctions"]], "deltasymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.DeltaSymbol"]], "envmarkersymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.EnvMarkerSymbol"]], "environment (class in interpreter.cse_machine.environment)": [[3, "interpreter.cse_machine.environment.Environment"]], "etaclosuresymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.EtaClosureSymbol"]], "functionfactory (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.FunctionFactory"]], "functionsymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.FunctionSymbol"]], "gammasymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.GammaSymbol"]], "isdummy (interpreter.cse_machine.functions.definedfunctions attribute)": [[3, "interpreter.cse_machine.functions.DefinedFunctions.ISDUMMY"]], "isfunction (interpreter.cse_machine.functions.definedfunctions attribute)": [[3, "interpreter.cse_machine.functions.DefinedFunctions.ISFUNCTION"]], "isinteger (interpreter.cse_machine.functions.definedfunctions attribute)": [[3, "interpreter.cse_machine.functions.DefinedFunctions.ISINTEGER"]], "isstring (interpreter.cse_machine.functions.definedfunctions attribute)": [[3, "interpreter.cse_machine.functions.DefinedFunctions.ISSTRING"]], "istruthvalue (interpreter.cse_machine.functions.definedfunctions attribute)": [[3, "interpreter.cse_machine.functions.DefinedFunctions.ISTRUTHVALUE"]], "istuple (interpreter.cse_machine.functions.definedfunctions attribute)": [[3, "interpreter.cse_machine.functions.DefinedFunctions.ISTUPLE"]], "itos (interpreter.cse_machine.functions.definedfunctions attribute)": [[3, "interpreter.cse_machine.functions.DefinedFunctions.ITOS"]], "isdummyfn (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.IsDummyFn"]], "isfunctionfn (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.IsFunctionFn"]], "isintegerfn (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.IsIntegerFn"]], "isstringfn (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.IsStringFn"]], "istruthvaluefn (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.IsTruthValueFn"]], "istuplefn (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.IsTupleFn"]], "itosfn (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.ItoSFn"]], "lambdaclosuresymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.LambdaClosureSymbol"]], "lambdasymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.LambdaSymbol"]], "machineexception": [[3, "interpreter.cse_machine.exceptions.MachineException"]], "namesymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.NameSymbol"]], "order (interpreter.cse_machine.functions.definedfunctions attribute)": [[3, "interpreter.cse_machine.functions.DefinedFunctions.ORDER"]], "operatorsymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.OperatorSymbol"]], "orderfn (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.OrderFn"]], "print (interpreter.cse_machine.functions.definedfunctions attribute)": [[3, "interpreter.cse_machine.functions.DefinedFunctions.PRINT"]], "printfn (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.PrintFn"]], "stem (interpreter.cse_machine.functions.definedfunctions attribute)": [[3, "interpreter.cse_machine.functions.DefinedFunctions.STEM"]], "stern (interpreter.cse_machine.functions.definedfunctions attribute)": [[3, "interpreter.cse_machine.functions.DefinedFunctions.STERN"]], "stnode (class in interpreter.cse_machine.st)": [[3, "interpreter.cse_machine.st.STNode"]], "stack (class in interpreter.cse_machine.stack)": [[3, "interpreter.cse_machine.stack.Stack"]], "stemfn (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.StemFn"]], "sternfn (class in interpreter.cse_machine.functions)": [[3, "interpreter.cse_machine.functions.SternFn"]], "symbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.Symbol"]], "symbolfactory (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.SymbolFactory"]], "tausymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.TauSymbol"]], "tuplesymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.TupleSymbol"]], "unaryoperatorsymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.UnaryOperatorSymbol"]], "ystarsymbol (class in interpreter.cse_machine.symbol)": [[3, "interpreter.cse_machine.symbol.YStarSymbol"]], "addgamma() (interpreter.cse_machine.control.control method)": [[3, "interpreter.cse_machine.control.Control.addGamma"]], "addsymbol() (interpreter.cse_machine.control.control method)": [[3, "interpreter.cse_machine.control.Control.addSymbol"]], "addsymbol() (interpreter.cse_machine.control_structures.controlstruct method)": [[3, "interpreter.cse_machine.control_structures.ControlStruct.addSymbol"]], "applyfp() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.applyFP"]], "applyfunction() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.applyFunction"]], "applylambda() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.applyLambda"]], "applyystar() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.applyYStar"]], "assign_node() (interpreter.cse_machine.st.stnode static method)": [[3, "interpreter.cse_machine.st.STNode.assign_node"]], "binop() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.binop"]], "comma_node() (interpreter.cse_machine.st.stnode static method)": [[3, "interpreter.cse_machine.st.STNode.comma_node"]], "conditional() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.conditional"]], "create() (interpreter.cse_machine.functions.functionfactory static method)": [[3, "interpreter.cse_machine.functions.FunctionFactory.create"]], "createfcrsnode() (interpreter.cse_machine.st.stnode static method)": [[3, "interpreter.cse_machine.st.STNode.createFCRSNode"]], "createsymbol() (interpreter.cse_machine.symbol.symbolfactory static method)": [[3, "interpreter.cse_machine.symbol.SymbolFactory.createSymbol"]], "currentenv() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.currentEnv"]], "evaluate() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.evaluate"]], "exitenv() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.exitEnv"]], "fromlambdaclosure() (interpreter.cse_machine.symbol.etaclosuresymbol static method)": [[3, "interpreter.cse_machine.symbol.EtaClosureSymbol.fromLambdaClosure"]], "gamma_node() (interpreter.cse_machine.st.stnode static method)": [[3, "interpreter.cse_machine.st.STNode.gamma_node"]], "get() (interpreter.cse_machine.control_structures.controlstructures method)": [[3, "interpreter.cse_machine.control_structures.ControlStructures.get"]], "getchildrencount() (interpreter.cse_machine.st.stnode method)": [[3, "interpreter.cse_machine.st.STNode.getChildrenCount"]], "getenvmarkerindex() (interpreter.cse_machine.symbol.lambdaclosuresymbol method)": [[3, "interpreter.cse_machine.symbol.LambdaClosureSymbol.getEnvMarkerIndex"]], "getindex() (interpreter.cse_machine.control_structures.controlstruct method)": [[3, "interpreter.cse_machine.control_structures.ControlStruct.getIndex"]], "getindex() (interpreter.cse_machine.environment.environment method)": [[3, "interpreter.cse_machine.environment.Environment.getIndex"]], "getname() (interpreter.cse_machine.functions.definedfunction method)": [[3, "interpreter.cse_machine.functions.DefinedFunction.getName"]], "getsibilingcount() (interpreter.cse_machine.st.stnode method)": [[3, "interpreter.cse_machine.st.STNode.getSibilingCount"]], "get_arg() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.get_arg"]], "get_functions() (interpreter.cse_machine.functions.definedfunctions static method)": [[3, "interpreter.cse_machine.functions.DefinedFunctions.get_functions"]], "init() (interpreter.cse_machine.control_structures.csinitializer method)": [[3, "interpreter.cse_machine.control_structures.CSInitializer.init"]], "insertcontrolstruct() (interpreter.cse_machine.control.control method)": [[3, "interpreter.cse_machine.control.Control.insertControlStruct"]], "insertenvdata() (interpreter.cse_machine.environment.environment method)": [[3, "interpreter.cse_machine.environment.Environment.insertEnvData"]], "insertenvmarker() (interpreter.cse_machine.control.control method)": [[3, "interpreter.cse_machine.control.Control.insertEnvMarker"]], "interpreter.cse_machine": [[3, "module-interpreter.cse_machine"]], "interpreter.cse_machine.control": [[3, "module-interpreter.cse_machine.control"]], "interpreter.cse_machine.control_structures": [[3, "module-interpreter.cse_machine.control_structures"]], "interpreter.cse_machine.environment": [[3, "module-interpreter.cse_machine.environment"]], "interpreter.cse_machine.exceptions": [[3, "module-interpreter.cse_machine.exceptions"]], "interpreter.cse_machine.functions": [[3, "module-interpreter.cse_machine.functions"]], "interpreter.cse_machine.st": [[3, "module-interpreter.cse_machine.st"]], "interpreter.cse_machine.stack": [[3, "module-interpreter.cse_machine.stack"]], "interpreter.cse_machine.symbol": [[3, "module-interpreter.cse_machine.symbol"]], "isfunction() (interpreter.cse_machine.symbol.namesymbol method)": [[3, "interpreter.cse_machine.symbol.NameSymbol.isFunction"]], "isid() (interpreter.cse_machine.symbol.namesymbol method)": [[3, "interpreter.cse_machine.symbol.NameSymbol.isId"]], "isprimitive() (interpreter.cse_machine.symbol.namesymbol static method)": [[3, "interpreter.cse_machine.symbol.NameSymbol.isPrimitive"]], "isstring() (interpreter.cse_machine.symbol.namesymbol method)": [[3, "interpreter.cse_machine.symbol.NameSymbol.isString"]], "istuplesymbol() (interpreter.cse_machine.symbol.namesymbol static method)": [[3, "interpreter.cse_machine.symbol.NameSymbol.isTupleSymbol"]], "istype() (interpreter.cse_machine.symbol.symbol method)": [[3, "interpreter.cse_machine.symbol.Symbol.isType"]], "isvalidtype() (interpreter.cse_machine.symbol.namesymbol static method)": [[3, "interpreter.cse_machine.symbol.NameSymbol.isValidType"]], "is_conditional() (interpreter.cse_machine.st.stnode method)": [[3, "interpreter.cse_machine.st.STNode.is_conditional"]], "is_gamma() (interpreter.cse_machine.st.stnode method)": [[3, "interpreter.cse_machine.st.STNode.is_gamma"]], "is_lambda() (interpreter.cse_machine.st.stnode method)": [[3, "interpreter.cse_machine.st.STNode.is_lambda"]], "is_tau() (interpreter.cse_machine.st.stnode method)": [[3, "interpreter.cse_machine.st.STNode.is_tau"]], "isdefined() (interpreter.cse_machine.functions.definedfunctions method)": [[3, "interpreter.cse_machine.functions.DefinedFunctions.isdefined"]], "lambda_node() (interpreter.cse_machine.st.stnode static method)": [[3, "interpreter.cse_machine.st.STNode.lambda_node"]], "lookupenv() (interpreter.cse_machine.environment.environment method)": [[3, "interpreter.cse_machine.environment.Environment.lookUpEnv"]], "parsevalueintoken() (interpreter.cse_machine.st.stnode method)": [[3, "interpreter.cse_machine.st.STNode.parseValueInToken"]], "popstack() (interpreter.cse_machine.stack.stack method)": [[3, "interpreter.cse_machine.stack.Stack.popStack"]], "pushstack() (interpreter.cse_machine.stack.stack method)": [[3, "interpreter.cse_machine.stack.Stack.pushStack"]], "removeenvironment() (interpreter.cse_machine.stack.stack method)": [[3, "interpreter.cse_machine.stack.Stack.removeEnvironment"]], "removerightmost() (interpreter.cse_machine.control.control method)": [[3, "interpreter.cse_machine.control.Control.removeRightMost"]], "run() (interpreter.cse_machine.functions.concfn method)": [[3, "interpreter.cse_machine.functions.ConcFn.run"]], "run() (interpreter.cse_machine.functions.definedfunction method)": [[3, "interpreter.cse_machine.functions.DefinedFunction.run"]], "run() (interpreter.cse_machine.functions.isdummyfn method)": [[3, "interpreter.cse_machine.functions.IsDummyFn.run"]], "run() (interpreter.cse_machine.functions.isfunctionfn method)": [[3, "interpreter.cse_machine.functions.IsFunctionFn.run"]], "run() (interpreter.cse_machine.functions.isintegerfn method)": [[3, "interpreter.cse_machine.functions.IsIntegerFn.run"]], "run() (interpreter.cse_machine.functions.isstringfn method)": [[3, "interpreter.cse_machine.functions.IsStringFn.run"]], "run() (interpreter.cse_machine.functions.istruthvaluefn method)": [[3, "interpreter.cse_machine.functions.IsTruthValueFn.run"]], "run() (interpreter.cse_machine.functions.istuplefn method)": [[3, "interpreter.cse_machine.functions.IsTupleFn.run"]], "run() (interpreter.cse_machine.functions.itosfn method)": [[3, "interpreter.cse_machine.functions.ItoSFn.run"]], "run() (interpreter.cse_machine.functions.orderfn method)": [[3, "interpreter.cse_machine.functions.OrderFn.run"]], "run() (interpreter.cse_machine.functions.printfn method)": [[3, "interpreter.cse_machine.functions.PrintFn.run"]], "run() (interpreter.cse_machine.functions.stemfn method)": [[3, "interpreter.cse_machine.functions.StemFn.run"]], "run() (interpreter.cse_machine.functions.sternfn method)": [[3, "interpreter.cse_machine.functions.SternFn.run"]], "siblings() (interpreter.cse_machine.st.stnode static method)": [[3, "interpreter.cse_machine.st.STNode.siblings"]], "stacklambda() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.stackLambda"]], "stackname() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.stackName"]], "tau_node() (interpreter.cse_machine.st.stnode static method)": [[3, "interpreter.cse_machine.st.STNode.tau_node"]], "tolambdaclosure() (interpreter.cse_machine.symbol.etaclosuresymbol static method)": [[3, "interpreter.cse_machine.symbol.EtaClosureSymbol.toLambdaClosure"]], "top() (interpreter.cse_machine.stack.stack method)": [[3, "interpreter.cse_machine.stack.Stack.top"]], "tupleformation() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.tupleFormation"]], "tupleselection() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.tupleSelection"]], "unop() (interpreter.cse_machine.csemachine method)": [[3, "interpreter.cse_machine.CSEMachine.unop"]], "ystar_node() (interpreter.cse_machine.st.stnode static method)": [[3, "interpreter.cse_machine.st.STNode.ystar_node"]], "buildtreeexception": [[4, "interpreter.lexer.tokens.BuildTreeException"]], "builttreeexception": [[4, "interpreter.lexer.tokens.BuiltTreeException"]], "closeparen (interpreter.lexer.tokens.tokenregex attribute)": [[4, "interpreter.lexer.tokens.TokenRegex.CloseParen"]], "comma (interpreter.lexer.tokens.tokenregex attribute)": [[4, "interpreter.lexer.tokens.TokenRegex.Comma"]], "commatoken (class in interpreter.lexer.tokens)": [[4, "interpreter.lexer.tokens.CommaToken"]], "comment (interpreter.lexer.tokens.tokenregex attribute)": [[4, "interpreter.lexer.tokens.TokenRegex.Comment"]], "commenttoken (class in interpreter.lexer.tokens)": [[4, "interpreter.lexer.tokens.CommentToken"]], "identifier (interpreter.lexer.tokens.tokenregex attribute)": [[4, "interpreter.lexer.tokens.TokenRegex.Identifier"]], "identifiertoken (class in interpreter.lexer.tokens)": [[4, "interpreter.lexer.tokens.IdentifierToken"]], "integer (interpreter.lexer.tokens.tokenregex attribute)": [[4, "interpreter.lexer.tokens.TokenRegex.Integer"]], "integertoken (class in interpreter.lexer.tokens)": [[4, "interpreter.lexer.tokens.IntegerToken"]], "invalidtokenexception": [[4, "interpreter.lexer.tokens.InvalidTokenException"]], "keywordtoken (class in interpreter.lexer.tokens)": [[4, "interpreter.lexer.tokens.KeywordToken"]], "lparentoken (class in interpreter.lexer.tokens)": [[4, "interpreter.lexer.tokens.LParenToken"]], "lexer (class in interpreter.lexer)": [[4, "interpreter.lexer.Lexer"]], "operator_symbol (interpreter.lexer.tokens.tokenregex attribute)": [[4, "interpreter.lexer.tokens.TokenRegex.OPERATOR_SYMBOL"]], "openparen (interpreter.lexer.tokens.tokenregex attribute)": [[4, "interpreter.lexer.tokens.TokenRegex.OpenParen"]], "operator (interpreter.lexer.tokens.tokenregex attribute)": [[4, "interpreter.lexer.tokens.TokenRegex.Operator"]], "operatortoken (class in interpreter.lexer.tokens)": [[4, "interpreter.lexer.tokens.OperatorToken"]], "rparentoken (class in interpreter.lexer.tokens)": [[4, "interpreter.lexer.tokens.RParenToken"]], "semicolon (interpreter.lexer.tokens.tokenregex attribute)": [[4, "interpreter.lexer.tokens.TokenRegex.SemiColon"]], "semicolontoken (class in interpreter.lexer.tokens)": [[4, "interpreter.lexer.tokens.SemiColonToken"]], "spaces (interpreter.lexer.tokens.tokenregex attribute)": [[4, "interpreter.lexer.tokens.TokenRegex.Spaces"]], "spacestoken (class in interpreter.lexer.tokens)": [[4, "interpreter.lexer.tokens.SpacesToken"]], "string (interpreter.lexer.tokens.tokenregex attribute)": [[4, "interpreter.lexer.tokens.TokenRegex.String"]], "stringtoken (class in interpreter.lexer.tokens)": [[4, "interpreter.lexer.tokens.StringToken"]], "token (class in interpreter.lexer.tokens)": [[4, "interpreter.lexer.tokens.Token"]], "tokenregex (class in interpreter.lexer.tokens)": [[4, "interpreter.lexer.tokens.TokenRegex"]], "fromline() (interpreter.lexer.tokens.invalidtokenexception class method)": [[4, "interpreter.lexer.tokens.InvalidTokenException.fromLine"]], "fromtoken() (interpreter.lexer.tokens.invalidtokenexception class method)": [[4, "interpreter.lexer.tokens.InvalidTokenException.fromToken"]], "fromvalue() (interpreter.lexer.tokens.token class method)": [[4, "interpreter.lexer.tokens.Token.fromValue"]], "gettype() (interpreter.lexer.tokens.token method)": [[4, "interpreter.lexer.tokens.Token.getType"]], "getvalue() (interpreter.lexer.tokens.token method)": [[4, "interpreter.lexer.tokens.Token.getValue"]], "instance() (interpreter.lexer.tokens.token class method)": [[4, "interpreter.lexer.tokens.Token.instance"]], "interpreter.lexer": [[4, "module-interpreter.lexer"]], "interpreter.lexer.tokens": [[4, "module-interpreter.lexer.tokens"]], "istype() (interpreter.lexer.tokens.token method)": [[4, "interpreter.lexer.tokens.Token.isType"]], "isvalue() (interpreter.lexer.tokens.token method)": [[4, "interpreter.lexer.tokens.Token.isValue"]], "lookahead() (interpreter.lexer.lexer method)": [[4, "interpreter.lexer.Lexer.lookAhead"]], "nexttoken() (interpreter.lexer.lexer method)": [[4, "interpreter.lexer.Lexer.nextToken"]], "regex() (interpreter.lexer.tokens.commatoken method)": [[4, "interpreter.lexer.tokens.CommaToken.regex"]], "regex() (interpreter.lexer.tokens.commenttoken method)": [[4, "interpreter.lexer.tokens.CommentToken.regex"]], "regex() (interpreter.lexer.tokens.identifiertoken method)": [[4, "interpreter.lexer.tokens.IdentifierToken.regex"]], "regex() (interpreter.lexer.tokens.integertoken method)": [[4, "interpreter.lexer.tokens.IntegerToken.regex"]], "regex() (interpreter.lexer.tokens.lparentoken method)": [[4, "interpreter.lexer.tokens.LParenToken.regex"]], "regex() (interpreter.lexer.tokens.operatortoken method)": [[4, "interpreter.lexer.tokens.OperatorToken.regex"]], "regex() (interpreter.lexer.tokens.rparentoken method)": [[4, "interpreter.lexer.tokens.RParenToken.regex"]], "regex() (interpreter.lexer.tokens.semicolontoken method)": [[4, "interpreter.lexer.tokens.SemiColonToken.regex"]], "regex() (interpreter.lexer.tokens.spacestoken method)": [[4, "interpreter.lexer.tokens.SpacesToken.regex"]], "regex() (interpreter.lexer.tokens.stringtoken method)": [[4, "interpreter.lexer.tokens.StringToken.regex"]], "regex() (interpreter.lexer.tokens.token method)": [[4, "interpreter.lexer.tokens.Token.regex"]], "reset() (interpreter.lexer.lexer method)": [[4, "interpreter.lexer.Lexer.reset"]], "tokenize() (interpreter.lexer.lexer method)": [[4, "interpreter.lexer.Lexer.tokenize"]], "type_keywords() (interpreter.lexer.tokens.keywordtoken method)": [[4, "interpreter.lexer.tokens.KeywordToken.type_keywords"]], "values() (interpreter.lexer.tokens.keywordtoken method)": [[4, "interpreter.lexer.tokens.KeywordToken.values"]], "rpalparser (class in interpreter.parser)": [[5, "interpreter.parser.RPALParser"]], "interpreter.parser": [[5, "module-interpreter.parser"]], "parse() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.parse"]], "proc_a() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_A"]], "proc_af() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_Af"]], "proc_ap() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_Ap"]], "proc_at() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_At"]], "proc_b() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_B"]], "proc_bp() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_Bp"]], "proc_bs() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_Bs"]], "proc_bt() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_Bt"]], "proc_d() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_D"]], "proc_da() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_Da"]], "proc_db() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_Db"]], "proc_dr() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_Dr"]], "proc_e() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_E"]], "proc_ew() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_Ew"]], "proc_r() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_R"]], "proc_rn() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_Rn"]], "proc_t() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_T"]], "proc_ta() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_Ta"]], "proc_tc() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_Tc"]], "proc_vb() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_Vb"]], "proc_vl() (interpreter.parser.rpalparser method)": [[5, "interpreter.parser.RPALParser.proc_Vl"]], "logger": [[6, "module-logger"]], "main() (in module myrpal)": [[8, "myrpal.main"]], "myrpal": [[8, "module-myrpal"]], "binarytreenode (class in structs.tree)": [[9, "structs.tree.BinaryTreeNode"]], "stack (class in structs.stack)": [[9, "structs.stack.Stack"]], "treeformatter (class in structs.tree)": [[9, "structs.tree.TreeFormatter"]], "copy() (structs.tree.binarytreenode class method)": [[9, "structs.tree.BinaryTreeNode.copy"]], "deep_copy() (structs.tree.binarytreenode class method)": [[9, "structs.tree.BinaryTreeNode.deep_copy"]], "getleft() (structs.tree.binarytreenode method)": [[9, "structs.tree.BinaryTreeNode.getLeft"]], "getright() (structs.tree.binarytreenode method)": [[9, "structs.tree.BinaryTreeNode.getRight"]], "getvalue() (structs.tree.binarytreenode method)": [[9, "structs.tree.BinaryTreeNode.getValue"]], "isvalue() (structs.tree.binarytreenode method)": [[9, "structs.tree.BinaryTreeNode.isValue"]], "is_empty() (structs.stack.stack method)": [[9, "structs.stack.Stack.is_empty"]], "is_id() (structs.tree.binarytreenode method)": [[9, "structs.tree.BinaryTreeNode.is_id"]], "is_name() (structs.tree.binarytreenode method)": [[9, "structs.tree.BinaryTreeNode.is_name"]], "line_str() (structs.tree.treeformatter static method)": [[9, "structs.tree.TreeFormatter.line_str"]], "peek() (structs.stack.stack method)": [[9, "structs.stack.Stack.peek"]], "pop() (structs.stack.stack method)": [[9, "structs.stack.Stack.pop"]], "push() (structs.stack.stack method)": [[9, "structs.stack.Stack.push"]], "setleft() (structs.tree.binarytreenode method)": [[9, "structs.tree.BinaryTreeNode.setLeft"]], "setright() (structs.tree.binarytreenode method)": [[9, "structs.tree.BinaryTreeNode.setRight"]], "setvalue() (structs.tree.binarytreenode method)": [[9, "structs.tree.BinaryTreeNode.setValue"]], "size() (structs.stack.stack method)": [[9, "structs.stack.Stack.size"]], "structs": [[9, "module-structs"]], "structs.stack": [[9, "module-structs.stack"]], "structs.tree": [[9, "module-structs.tree"]], "testlexer (class in tests.test_lexer)": [[10, "tests.test_lexer.TestLexer"]], "testmachineoutput (class in tests.test_cse_machine)": [[10, "tests.test_cse_machine.TestMachineOutput"]], "testparser (class in tests.test_parser)": [[10, "tests.test_parser.TestParser"]], "testrpalparser (class in tests.test_rpal_parser)": [[10, "tests.test_rpal_parser.TestRPALParser"]], "testrpalstgeneration (class in tests.test_st)": [[10, "tests.test_st.TestRPALSTGeneration"]], "get_rpal_st() (tests.test_st.testrpalstgeneration method)": [[10, "tests.test_st.TestRPALSTGeneration.get_rpal_st"]], "run_rpal() (tests.test_cse_machine.testmachineoutput method)": [[10, "tests.test_cse_machine.TestMachineOutput.run_rpal"]], "test() (tests.test_rpal_parser.testrpalparser method)": [[10, "tests.test_rpal_parser.TestRPALParser.test"]], "test_d() (tests.test_rpal_parser.testrpalparser method)": [[10, "tests.test_rpal_parser.TestRPALParser.test_D"]], "test_e() (tests.test_rpal_parser.testrpalparser method)": [[10, "tests.test_rpal_parser.TestRPALParser.test_E"]], "test_e_1() (tests.test_rpal_parser.testrpalparser method)": [[10, "tests.test_rpal_parser.TestRPALParser.test_E_1"]], "test_e_empty() (tests.test_rpal_parser.testrpalparser method)": [[10, "tests.test_rpal_parser.TestRPALParser.test_E_empty"]], "test_rn() (tests.test_rpal_parser.testrpalparser method)": [[10, "tests.test_rpal_parser.TestRPALParser.test_Rn"]], "test_rn_empty() (tests.test_rpal_parser.testrpalparser method)": [[10, "tests.test_rpal_parser.TestRPALParser.test_Rn_empty"]], "test_tc() (tests.test_rpal_parser.testrpalparser method)": [[10, "tests.test_rpal_parser.TestRPALParser.test_Tc"]], "test_vb() (tests.test_rpal_parser.testrpalparser method)": [[10, "tests.test_rpal_parser.TestRPALParser.test_Vb"]], "test_vl() (tests.test_rpal_parser.testrpalparser method)": [[10, "tests.test_rpal_parser.TestRPALParser.test_Vl"]], "test_ast_str() (tests.test_parser.testparser method)": [[10, "tests.test_parser.TestParser.test_ast_str"]], "test_cse_machine() (tests.test_cse_machine.testmachineoutput method)": [[10, "tests.test_cse_machine.TestMachineOutput.test_cse_machine"]], "test_integer_token() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_integer_token"]], "test_lex() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lex"]], "test_lex_comma() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lex_comma"]], "test_lex_comment() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lex_comment"]], "test_lex_comment_2() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lex_comment_2"]], "test_lex_empty() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lex_empty"]], "test_lex_invalid_token() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lex_invalid_token"]], "test_lex_one_token() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lex_one_token"]], "test_lex_paren() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lex_paren"]], "test_lex_semicolon() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lex_semicolon"]], "test_lex_simple() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lex_simple"]], "test_lex_spaces() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lex_spaces"]], "test_lex_two_tokens() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lex_two_tokens"]], "test_lookahead_after_nexttoken() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lookAhead_after_nextToken"]], "test_lookahead_comment() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lookAhead_comment"]], "test_lookahead_comment_2() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lookAhead_comment_2"]], "test_lookahead_default() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lookAhead_default"]], "test_lookahead_empty() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lookAhead_empty"]], "test_lookahead_multiple_calls() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lookAhead_multiple_calls"]], "test_lookahead_simple() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_lookAhead_simple"]], "test_nexttoken() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_nextToken"]], "test_operator_token() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_operator_token"]], "test_st_generation() (tests.test_st.testrpalstgeneration method)": [[10, "tests.test_st.TestRPALSTGeneration.test_st_generation"]], "test_string_token() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_string_token"]], "test_strings() (tests.test_lexer.testlexer method)": [[10, "tests.test_lexer.TestLexer.test_strings"]], "tests": [[10, "module-tests"]], "tests.test_cse_machine": [[10, "module-tests.test_cse_machine"]], "tests.test_lexer": [[10, "module-tests.test_lexer"]], "tests.test_parser": [[10, "module-tests.test_parser"]], "tests.test_rpal_parser": [[10, "module-tests.test_rpal_parser"]], "tests.test_st": [[10, "module-tests.test_st"]]}})